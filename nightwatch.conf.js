// require('env2')('.env'); // optionally store youre Evironment Variables in .env
const seleniumServer = require("selenium-server");
const chromedriver = require("chromedriver");
const SCREENSHOT_PATH = "./screenshots/";

// we use a nightwatch.conf.js file so we can include comments and helper functions
module.exports = {
  "src_folders": [
    "tests/selenium"// Where you are storing your Nightwatch e2e tests
  ],
  "output_folder": "./reports", // reports (test outcome) output by nightwatch
  "selenium": {
    "start_process": true, // tells nightwatch to start/stop the selenium process
    "server_path": seleniumServer.path,
    "host": "127.0.0.1",
    "port": 4444, // standard selenium port
    "cli_args": {
      "webdriver.chrome.driver" : chromedriver.path
    }
  },
  "test_settings": {
    "default": {
      "screenshots": {
        "enabled": true, // if you want to keep screenshots
        "path": './screenshots' // save screenshots here
      },
      "globals": {
        "waitForConditionTimeout": 5000 // sometimes internet is slow so wait.
      },
      "desiredCapabilities": { // use Chrome as the default browser for tests
        "browserName": "chrome",
        "chromeOptions": {
          "args" : ["--no-sandbox"],
          "w3c": false
        }
      }
    },
    "chrome": {
      "desiredCapabilities": {
        "browserName": "chrome",
        "javascriptEnabled": true // turn off to test progressive enhancement
      }
    }
  }
}

function padLeft (count) { // theregister.co.uk/2016/03/23/npm_left_pad_chaos/
  return count < 10 ? '0' + count : count.toString();
}

var FILECOUNT = 0; // "global" screenshot file count
/**
 * The default is to save screenshots to the root of your project even though
 * there is a screenshots path in the config object above! ... so we need a
 * function that returns the correct path for storing our screenshots.
 * While we're at it, we are adding some meta-data to the filename, specifically
 * the Platform/Browser where the test was run and the test (file) name.
 */
function imgpath (browser) {
  var a = browser.options.desiredCapabilities;
  var meta = [a.platform];
  meta.push(a.browserName ? a.browserName : 'any');
  meta.push(a.version ? a.version : 'any');
  meta.push(a.name); // this is the test filename so always exists.
  var metadata = meta.join('~').toLowerCase().replace(/ /g, '');
  return SCREENSHOT_PATH + metadata + '_' + padLeft(FILECOUNT++) + '_';
}

module.exports.imgpath = imgpath;
module.exports.SCREENSHOT_PATH = SCREENSHOT_PATH;
// // Autogenerated by Nightwatch
// // Refer to the online docs for more details: https://nightwatchjs.org/gettingstarted/configuration/
// const Services = {}; loadServices();
//
// module.exports = {
//   // An array of folders (excluding subfolders) where your tests are located;
//   // if this is not specified, the test source must be passed as the second argument to the test runner.
//   src_folders: ['/tests/selenium'],
//
//   // See https://nightwatchjs.org/guide/working-with-page-objects/
//   page_objects_path: '',
//
//   // See https://nightwatchjs.org/guide/extending-nightwatch/#writing-custom-commands
//   custom_commands_path:  '',
//
//   // See https://nightwatchjs.org/guide/extending-nightwatch/#writing-custom-assertions
//   custom_assertions_path: '',
//
//   // See https://nightwatchjs.org/guide/#external-globals
//   globals_path : '',
//
//   webdriver: {},
//
//   test_settings: {
//     default: {
//       disable_error_log: false,
//       launch_url: '127.0.0.1',
//       port: 44444,
//
//       screenshots: {
//         enabled: true,
//         path: 'test/selenium/screens',
//         on_failure: true
//       },
//
//       desiredCapabilities: {
//         browserName : 'chrome'
//       },
//
//       webdriver: {
//         start_process: true,
//         server_path: (Services.chromedriver ? Services.chromedriver.path : '')
//       }
//     },
//
//
//
//     firefox: {
//       desiredCapabilities : {
//         browserName : 'firefox',
//         alwaysMatch: {
//           // Enable this if you encounter unexpected SSL certificate errors in Firefox
//           // acceptInsecureCerts: true,
//           'moz:firefoxOptions': {
//             args: [
//                'headless',
//               // '-verbose'
//             ],
//           }
//         }
//       },
//       webdriver: {
//         start_process: true,
//         port: 4444,
//         server_path: (Services.geckodriver ? Services.geckodriver.path : ''),
//         cli_args: [
//           // very verbose geckodriver logs
//           // '-vv'
//         ]
//       }
//     },
//
//     chrome: {
//       desiredCapabilities : {
//         browserName : 'chrome',
//         chromeOptions : {
//           // This tells Chromedriver to run using the legacy JSONWire protocol (not required in Chrome 78)
//           // w3c: false,
//           // More info on Chromedriver: https://sites.google.com/a/chromium.org/chromedriver/
//           args: [
//             //'--no-sandbox',
//             //'--ignore-certificate-errors',
//             //'--allow-insecure-localhost',
//             //'--headless'
//           ]
//         }
//       },
//
//       webdriver: {
//         start_process: true,
//         port: 9515,
//         server_path: (Services.chromedriver ? Services.chromedriver.path : ''),
//         cli_args: [
//           // --verbose
//         ]
//       }
//     },
//
//     //////////////////////////////////////////////////////////////////////////////////
//     // Configuration for when using the browserstack.com cloud service               |
//     //                                                                               |
//     // Please set the username and access key by setting the environment variables:  |
//     // - BROWSERSTACK_USER                                                           |
//     // - BROWSERSTACK_KEY                                                            |
//     // .env files are supported                                                      |
//     //////////////////////////////////////////////////////////////////////////////////
//     browserstack: {
//       selenium: {
//         host: 'hub-cloud.browserstack.com',
//         port: 443
//       },
//       // More info on configuring capabilities can be found on:
//       // https://www.browserstack.com/automate/capabilities?tag=selenium-4
//       desiredCapabilities: {
//         'bstack:options' : {
//           local: 'false',
//           userName: '${BROWSERSTACK_USER}',
//           accessKey: '${BROWSERSTACK_KEY}',
//         }
//       },
//
//       disable_error_log: true,
//       webdriver: {
//         keep_alive: true,
//         start_process: false
//       }
//     },
//
//     'browserstack.chrome': {
//       extends: 'browserstack',
//       desiredCapabilities: {
//         browserName: 'chrome',
//         chromeOptions : {
//           // This tells Chromedriver to run using the legacy JSONWire protocol
//           // More info on Chromedriver: https://sites.google.com/a/chromium.org/chromedriver/
//           w3c: false
//         }
//       }
//     },
//
//     'browserstack.firefox': {
//       extends: 'browserstack',
//       desiredCapabilities: {
//         browserName: 'firefox'
//       }
//     },
//
//     'browserstack.ie': {
//       extends: 'browserstack',
//       desiredCapabilities: {
//         browserName: 'IE',
//         browserVersion: '11.0',
//         'bstack:options' : {
//           os: 'Windows',
//           osVersion: '10',
//           local: 'false',
//           seleniumVersion: '3.5.2',
//           resolution: '1366x768'
//         }
//       }
//     },
//
//     //////////////////////////////////////////////////////////////////////////////////
//     // Configuration for when using the Selenium service, either locally or remote,  |
//     //  like Selenium Grid                                                           |
//     //////////////////////////////////////////////////////////////////////////////////
//     selenium: {
//       // Selenium Server is running locally and is managed by Nightwatch
//       selenium: {
//         start_process: true,
//         port: 4444,
//         server_path: (Services.seleniumServer ? Services.seleniumServer.path : ''),
//         cli_args: {
//           'webdriver.gecko.driver': (Services.geckodriver ? Services.geckodriver.path : ''),
//           'webdriver.chrome.driver': (Services.chromedriver ? Services.chromedriver.path : '')
//         }
//       }
//     },
//
//     'selenium.chrome': {
//       extends: 'selenium',
//       desiredCapabilities: {
//         browserName: 'chrome',
//         chromeOptions : {
//           w3c: false
//         }
//       }
//     },
//
//     'selenium.firefox': {
//       extends: 'selenium',
//       desiredCapabilities: {
//         browserName: 'firefox',
//         'moz:firefoxOptions': {
//           args: [
//             // '-headless',
//             // '-verbose'
//           ]
//         }
//       }
//     }
//   }
// };
//
// function loadServices() {
//   try {
//     Services.seleniumServer = require('selenium-server');
//   } catch (err) {}
//
//   try {
//     Services.chromedriver = require('chromedriver');
//   } catch (err) {}
//
//   try {
//     Services.geckodriver = require('geckodriver');
//   } catch (err) {}
// }
